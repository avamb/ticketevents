name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.0', '8.1', '8.2', '8.3']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: curl, json, zip, mbstring
          coverage: xdebug
          tools: composer:v2
          
      - name: Validate composer.json and composer.lock
        run: composer validate --strict
        
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-
            
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader
        
      - name: Run PHPCS (Code Style Check)
        run: composer run-script phpcs
        
      - name: Run PHPStan (Static Analysis)
        run: composer run-script phpstan
        continue-on-error: true # Allow to continue for now, will be strict later

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        php-version: ['8.0', '8.1', '8.2', '8.3']
        wordpress-version: ['6.0', '6.1', '6.2', '6.3', '6.4']
        
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: curl, json, zip, mbstring, mysql
          coverage: xdebug
          tools: composer:v2
          
      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-
            
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader
        
      - name: Setup WordPress test environment
        env:
          WP_VERSION: ${{ matrix.wordpress-version }}
          WP_MULTISITE: 0
        run: |
          # Install WordPress test suite
          bash tests/bin/install-wp-tests.sh wordpress_test root password 127.0.0.1:3306 $WP_VERSION
        continue-on-error: true # WordPress test suite setup can be tricky
        
      - name: Run PHPUnit tests
        run: |
          if [ -f phpunit.phar ]; then
            php phpunit.phar --coverage-clover=coverage.xml
          else
            composer run-script test -- --coverage-clover=coverage.xml
          fi
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: php-${{ matrix.php-version }}-wp-${{ matrix.wordpress-version }}
          fail_ci_if_error: false

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: curl, json, zip, mbstring
          tools: composer:v2
          
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        
      - name: Security audit with Composer
        run: composer audit
        continue-on-error: true # Allow to continue for now
        
      - name: Check for known security vulnerabilities
        uses: symfonycorp/security-checker-action@v4
        continue-on-error: true

  compatibility:
    name: WordPress Compatibility
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: curl, json, zip, mbstring
          tools: composer:v2
          
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest
        
      - name: WordPress Coding Standards Check
        run: |
          # Install WPCS if not already available
          if [ ! -d "tools/wpcs" ]; then
            echo "WPCS not found in tools directory"
          fi
          
          # Run PHPCS with WordPress standards
          composer run-script phpcs
          
      - name: Check Plugin Headers
        run: |
          # Verify plugin has required headers
          php -r "
          \$plugin_file = 'bil24-connector.php';
          if (!file_exists(\$plugin_file)) {
            echo 'Plugin file not found\n';
            exit(1);
          }
          \$content = file_get_contents(\$plugin_file);
          \$required_headers = ['Plugin Name', 'Description', 'Version', 'Author'];
          foreach (\$required_headers as \$header) {
            if (strpos(\$content, \$header . ':') === false) {
              echo 'Missing required header: ' . \$header . '\n';
              exit(1);
            }
          }
          echo 'All required plugin headers found\n';
          "

  build:
    name: Build Plugin Package
    runs-on: ubuntu-latest
    needs: [test, security, compatibility]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: curl, json, zip, mbstring
          tools: composer:v2
          
      - name: Install production dependencies
        run: composer install --prefer-dist --no-dev --optimize-autoloader --no-progress
        
      - name: Create plugin package
        run: |
          # Create build directory
          mkdir -p build
          
          # Copy plugin files (exclude dev files)
          rsync -av --exclude-from='.github/workflows/.buildignore' . build/bil24-connector/
          
          # Create ZIP package
          cd build
          zip -r bil24-connector-${{ github.event.release.tag_name }}.zip bil24-connector/
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/bil24-connector-${{ github.event.release.tag_name }}.zip
          asset_name: bil24-connector-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip

  deploy:
    name: Deploy to WordPress.org
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && !github.event.release.prerelease
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: WordPress Plugin Deploy
        uses: 10up/action-wordpress-plugin-deploy@stable
        env:
          SVN_PASSWORD: ${{ secrets.WP_ORG_PASSWORD }}
          SVN_USERNAME: ${{ secrets.WP_ORG_USERNAME }}
          SLUG: bil24-connector
        continue-on-error: true # Don't fail if WP.org credentials not available 